{
	"info": {
		"_postman_id": "53e098e6-be58-47f6-968a-fb5bce42e6ad",
		"name": "POSTMAN TESTS",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20847697"
	},
	"item": [
		{
			"name": "first request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Status code 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3 request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Status code 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить response body в json.\r",
							"let DataInJson = pm.response.json()\r",
							"//Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"let name_resp = DataInJson.name\r",
							"pm.test(\"Correct_name\", function () {\r",
							"    pm.expect(name_resp).to.include(\"Anastasia\");\r",
							"});\r",
							"//Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"let age_resp = DataInJson.age\r",
							"pm.test(\"Correct_age\", function () {\r",
							"    pm.expect(age_resp).to.eql(\"100\");\r",
							"});    \r",
							"// Проверить, что salary в ответе равно salary s request (salary вбить руками.)   \r",
							"let salary_resp = String(DataInJson.salary)\r",
							"pm.test(\"Correct_salary\", function () {\r",
							"    pm.expect(salary_resp).to.eql(\"1000000\"); \r",
							"});   \r",
							"//Спарсить request.\r",
							"let requestdata = request.data\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let name_req = requestdata.name\r",
							"pm.test(\"Correct_name\", function () {\r",
							"    pm.expect(name_req).to.include(name_resp);\r",
							"});\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let age_req = requestdata.age\r",
							"pm.test(\"Correct_age\", function () {\r",
							"    pm.expect(age_req).to.eql(age_resp);\r",
							"});    \r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let salary_req = requestdata.salary\r",
							"pm.test(\"Correct_salary\", function () {\r",
							"    pm.expect(salary_resp).to.eql(salary_req);\r",
							"});  \r",
							"// Вывести в консоль параметр family из response.\r",
							"console.log (DataInJson.family)\r",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let u_salary = DataInJson.family.u_salary_1_5_year\r",
							"pm.test(\"Correct_SalaryCount\", function () {\r",
							"    pm.expect(u_salary).to.eql(salary_req * 4);\r",
							"});     "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Anastasia",
							"type": "text"
						},
						{
							"key": "age",
							"value": "100",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Anastasia",
							"disabled": true
						},
						{
							"key": "age",
							"value": "100",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000000",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить response body в json.\r",
							"let DataInJson1 = pm.response.json()\r",
							"//Спарсить request.\r",
							"let requestdata1 = pm.request.url.query.toObject()\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let name_resp1 = DataInJson1.name\r",
							"let name_req1 = requestdata1.name\r",
							"pm.test(\"Correct_response_name\", function () {\r",
							"   pm.expect(name_resp1).to.eql(name_req1);\r",
							"});\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let age_resp1 = DataInJson1.age\r",
							"let age_req1 = requestdata1.age\r",
							"pm.test(\"Correct_response_age\", function () {\r",
							"   pm.expect(age_resp1).to.eql(age_req1);\r",
							"});\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let salary_resp1 =String(DataInJson1.salary)\r",
							"let salary_req1 = requestdata1.salary\r",
							"pm.test(\"Correct_response_salary\", function () {\r",
							"   pm.expect(salary_resp1).to.eql(salary_req1);\r",
							"});\r",
							"//Вывести в консоль параметр family из response.\r",
							"console.log (DataInJson1.family)\r",
							"//Проверить, что у параметра dog есть параметры name.\r",
							"    pm.test(\"Dog_has_name\", function () {  \r",
							"pm.expect(DataInJson1.family.pets.dog).hasOwnProperty(\"name\")\r",
							"})   \r",
							"//Проверить, что у параметра dog есть параметры age. \r",
							"   pm.test(\"Dog_has_age\", function () {  \r",
							"pm.expect(DataInJson1.family.pets.dog).hasOwnProperty(\"age\")\r",
							"})    \r",
							"//Проверить, что параметр name имеет значение Luky. \r",
							"pm.test(\"Dog_name_Luky\", function () {  \r",
							"pm.expect(DataInJson1.family.pets.dog.name).to.eql(\"Luky\")\r",
							"})  \r",
							"//Проверить, что параметр age имеет значение 4. \r",
							"pm.test(\"Dog_age_to_be_eql_4\", function () {   \r",
							"pm.expect(DataInJson1.family.pets.dog.age).to.eql(4)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Anastasia&age=100&salary=1000000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Anastasia"
						},
						{
							"key": "age",
							"value": "100"
						},
						{
							"key": "salary",
							"value": "1000000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.environment.get(\"variable_key\");\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить response body в json.\r",
							"let DataInJson2 = pm.response.json()\r",
							"//Спарсить request.\r",
							"let requestdata2 = pm.request.url.query.toObject()\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Correct response name\", function () {\r",
							"    pm.expect(DataInJson2.name).to.eql(requestdata2.name);\r",
							"});\r",
							"//Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Correct response age\", function () {\r",
							"pm.expect(String(DataInJson2.age)).to.eql(requestdata2.age)\r",
							"});\r",
							"//Вывести в консоль параметр salary из request.\r",
							"console.log (requestdata2.salary)\r",
							"//Вывести в консоль параметр salary из response.\r",
							"console.log (DataInJson2.salary)\r",
							"//Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(DataInJson2.salary[0])\r",
							"//Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(DataInJson2.salary[1])\r",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(DataInJson2.salary[2])\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Correct_0_param\", function () {\r",
							"pm.expect(String(DataInJson2.salary[0])).to.eql(requestdata2.salary)\r",
							"});\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Correct_1_param\", function () {\r",
							"pm.expect(Number(DataInJson2.salary[1])).to.eql(requestdata2.salary * 2)\r",
							"});\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Correct_2_param\", function () {\r",
							"pm.expect(Number(DataInJson2.salary[2])).to.eql(requestdata2.salary * 3)\r",
							"});\r",
							"//Создать в окружении переменную name\r",
							"pm.environment.set(\"name\");\r",
							"//Создать в окружении переменную age\r",
							"pm.environment.set(\"age\");\r",
							"//Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\");\r",
							"//Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", requestdata2.name)\r",
							"//Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", requestdata2.age);\r",
							"//Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\",requestdata2.salary)\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (let i=0; i<DataInJson2.salary.length; i++){\r",
							"    console.log(DataInJson2.salary[i])\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Anastasia&age=100&salary=1000000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Anastasia"
						},
						{
							"key": "age",
							"value": "100"
						},
						{
							"key": "salary",
							"value": "1000000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Вставить параметр salary из окружения в request\r",
							"//Спарсить response body в json\r",
							"let DataInJson5 = pm.response.json()\r",
							"//Спарсить request\r",
							"let req5 = request.data\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Check_param_start_qa_salary\", function () {  \r",
							"pm.expect(DataInJson5).hasOwnProperty(\"start_qa_salary\")\r",
							"}) \r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_month\r",
							"pm.test(\"Check_param_qa_salary_after_5_month\", function () {  \r",
							"pm.expect(DataInJson5).hasOwnProperty(\"qa_salary_after_6_month\")\r",
							"})\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Check_param_qa_salary_after_12_month\", function () {  \r",
							"pm.expect(DataInJson5).hasOwnProperty(\"qa_salary_after_12_month\")\r",
							"})\r",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Check_param_qa_salary_after_1.5_year\", function () {  \r",
							"pm.expect(DataInJson5).hasOwnProperty(\"qa_salary_after_1.5_year\")\r",
							"})\r",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Check_param_qa_salary_after_3.5_year\", function () {  \r",
							"pm.expect(DataInJson5).hasOwnProperty(\"qa_salary_after_3.5_year\")\r",
							"})\r",
							"//Проверить, что json response имеет параметр person\r",
							"pm.test(\"Check_param_qa_person\", function () {  \r",
							"pm.expect(DataInJson5).hasOwnProperty(\"person\")\r",
							"})\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request).\r",
							"pm.test(\"Check_start_qa_salary_with_request\", function () {\r",
							"      pm.expect(String(DataInJson5.start_qa_salary)).to.eql(req5.salary);\r",
							"});\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request\r",
							"pm.test(\"Check_qa_salary_after_6_month_with_request\", function () {\r",
							"      pm.expect(DataInJson5.qa_salary_after_6_months).to.eql(req5.salary * 2);\r",
							"});\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request( (salary забрать из request)\r",
							"pm.test(\"Check_qa_salary_after_12_month_with_request\", function () {\r",
							"      pm.expect(DataInJson5.qa_salary_after_12_months).to.eql(req5.salary * 2.7)\r",
							"});   \r",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request)\r",
							"pm.test(\"Check_qa_salary_after_1.5_year_with_request\", function () {\r",
							"     pm.expect(DataInJson5[\"qa_salary_after_1.5_year\"]).to.eql(req5.salary * 3.3)\r",
							"});  \r",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request)\r",
							"pm.test(\"Check_qa_salary_after_12_month_with_request\", function () {\r",
							"     pm.expect(DataInJson5[\"qa_salary_after_3.5_years\"]).to.eql(req5.salary * 3.8)\r",
							"}); \r",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request)\r",
							"pm.test(\"Check_qa_salary_after_6_month_with_request\", function () {\r",
							"      pm.expect(DataInJson5.person.u_name[1]).to.eql(+req5.salary);\r",
							"});\r",
							"//Проверить, что параметр u_age равен age из request (age забрать из request)     \r",
							"pm.test(\"Check_qa_salary_after_6_month_with_request\", function () {\r",
							"      pm.expect(DataInJson5.person.u_age).to.eql(+req5.age);\r",
							"});\r",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request)\r",
							"pm.test(\"Check_qa_salary_after_6_month_with_request\", function () {\r",
							"      pm.expect(DataInJson5.person.u_salary_5_years).to.eql(req5.salary * 4.2);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}